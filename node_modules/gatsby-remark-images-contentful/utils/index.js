"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const axios = require(`axios`);

const getBase64Img =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (url) {
    const response = yield axios({
      method: `GET`,
      responseType: `arraybuffer`,
      url: `${url}`
    });
    const base64Img = `data:${response.headers[`content-type`]};base64,${new Buffer(response.data).toString(`base64`)}`;
    return base64Img;
  });

  return function getBase64Img(_x) {
    return _ref.apply(this, arguments);
  };
}();

const buildResponsiveSizes =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* ({
    metadata,
    imageUrl,
    options = {}
  }) {
    const width = metadata.width,
          height = metadata.height,
          density = metadata.density;
    const aspectRatio = width / height;
    const pixelRatio = options.sizeByPixelDensity && typeof density === `number` && density > 0 ? density / 72 : 1;
    const presentationWidth = Math.min(options.maxWidth, Math.round(width / pixelRatio));
    const presentationHeight = Math.round(presentationWidth * (height / width));

    if (!options.sizes) {
      options.sizes = `(max-width: ${presentationWidth}px) 100vw, ${presentationWidth}px`;
    }

    const images = [];
    images.push(metadata.width / 4);
    images.push(metadata.width / 2);
    images.push(metadata.width);
    images.push(metadata.width * 1.5);
    images.push(metadata.width * 2);
    images.push(metadata.width * 3);
    const filteredSizes = images.filter(size => size < width);
    filteredSizes.push(width);
    const base64Img = yield getBase64Img(`${imageUrl}?w=40`);
    const srcSet = filteredSizes.map(size => `${imageUrl}?w=${Math.round(size)} ${Math.round(size)}w`).join(`,\n`);
    const webpSrcSet = filteredSizes.map(size => `${imageUrl}?fm=webp&w=${Math.round(size)} ${Math.round(size)}w`).join(`,\n`); // TODO think about a better structure to save srcset types instead of adding them to the root

    return {
      base64: base64Img,
      aspectRatio,
      srcSet,
      webpSrcSet,
      src: imageUrl,
      sizes: options.sizes,
      density,
      presentationWidth,
      presentationHeight
    };
  });

  return function buildResponsiveSizes(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.buildResponsiveSizes = buildResponsiveSizes;
exports.getBase64Img = getBase64Img;